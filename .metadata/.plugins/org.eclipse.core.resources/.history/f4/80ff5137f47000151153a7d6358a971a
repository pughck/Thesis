package edu.rosehulman.pughck;

import java.util.Map;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

import org.apache.commons.configuration.ConfigurationBuilder;

import backtype.storm.spout.SpoutOutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseRichSpout;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Values;
import backtype.storm.utils.Utils;
import twitter4j.TwitterStream;

public class StormTestTweetSpout extends BaseRichSpout {

	private SpoutOutputCollector collector;
	private TwitterStream stream;
	private LinkedBlockingQueue<String> queue;

	private String key;
	private String secret;
	private String token;
	private String accessSecret;

	public StormTestTweetSpout(String key, String secret, String token, String accessSecret) {

		this.key = key;
		this.secret = secret;
		this.token = token;
		this.accessSecret = accessSecret;
	}

	@Override
	public void nextTuple() {

		String next = this.queue.poll();
		if (next == null) {
			Utils.sleep(100);
			return;
		}

		this.collector.emit(new Values(next));
	}

	@Override
	public void open(Map map, TopologyContext context, SpoutOutputCollector collector) {

		this.queue = new LinkedBlockingQueue<String>(1000);
		this.collector = collector;
		
		ConfigurationBuilder config = new ConfigurationBuilder()
				.setOAthConsumerKey(this.key)
				.setOAuthConsumerSecret(this.secret)
				.setOAuthAccessToken(this.token)
				.setOAuthAcessTokenSecret(this.accessSecret;
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {

		declarer.declare(new Fields("tweet"));
	}
}
