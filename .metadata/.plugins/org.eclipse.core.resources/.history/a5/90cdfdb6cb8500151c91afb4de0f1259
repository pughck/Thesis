package edu.rosehulman.pughck;

import java.io.IOException;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.hadoop.conf.Configuration;
import org.apache.storm.hdfs.common.security.HdfsSecurityUtil;

import backtype.storm.task.OutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseRichBolt;
import backtype.storm.tuple.Tuple;

@SuppressWarnings("serial")
public class MyHdfsBolt extends BaseRichBolt {

	@Override
	public void execute(Tuple tuple) {

	}

	@SuppressWarnings("rawtypes")
	@Override
	public void prepare(Map map, TopologyContext context, OutputCollector collector) {

		this.writeLock = new Object();
		if (this.syncPolicy == null)
			throw new IllegalStateException("SyncPolicy must be specified.");
		if (this.rotationPolicy == null)
			throw new IllegalStateException("RotationPolicy must be specified.");
		if (this.fsUrl == null) {
			throw new IllegalStateException("File system URL must be specified.");
		}

		this.collector = collector;
		this.fileNameFormat.prepare(conf, topologyContext);
		this.hdfsConfig = new Configuration();
		Map<String, Object> map = (Map<String, Object>) conf.get(this.configKey);
		if (map != null) {
			for (String key : map.keySet()) {
				this.hdfsConfig.set(key, String.valueOf(map.get(key)));
			}
		}

		try {
			HdfsSecurityUtil.login(conf, hdfsConfig);
			doPrepare(conf, topologyContext, collector);
			this.currentFile = createOutputFile();

		} catch (Exception e) {
			throw new RuntimeException("Error preparing HdfsBolt: " + e.getMessage(), e);
		}

		if (this.rotationPolicy instanceof TimedRotationPolicy) {
			long interval = ((TimedRotationPolicy) this.rotationPolicy).getInterval();
			this.rotationTimer = new Timer(true);
			TimerTask task = new TimerTask() {
				@Override
				public void run() {
					try {
						rotateOutputFile();
					} catch (IOException e) {
					}
				}
			};
			this.rotationTimer.scheduleAtFixedRate(task, interval, interval);
		}
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {

	}
}
